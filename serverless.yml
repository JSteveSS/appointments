service: appointment-service
frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    RDS_HOST: ${env:RDS_HOST}
    RDS_PORT: ${env:RDS_PORT}
    RDS_USER: ${env:RDS_USER}
    RDS_PASSWORD: ${env:RDS_PASSWORD}
    RDS_DATABASE: ${env:RDS_DATABASE}
    DYNAMO_TABLE: ${self:service}-${self:provider.stage}-Appointments
    SNS_TOPIC_ARN: !Ref SNSTopicAppointments
    EVENT_BUS_NAME: !Ref AppointmentsBus
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:Scan
          Resource:
            - !GetAtt AppointmentsTable.Arn
            - !Sub "${AppointmentsTable.Arn}/index/*"
        
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - !Ref SNSTopicAppointments
        
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - !GetAtt SQSPE.Arn
            - !GetAtt SQSCL.Arn
            - !GetAtt ResponseSQS.Arn
        
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - !GetAtt AppointmentsBus.Arn

build:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - '@aws-sdk/*'
    target: node18
    platform: node

functions:
  appointment:
    handler: src/handlers/appointment.handler
    events:
      - httpApi:
          path: /appointments
          method: post
      - httpApi:
          path: /appointments/{insuredId}
          method: get

  appointmentResponse:
    handler: src/handlers/appointment.handleResponse
    events:
      - sqs:
          arn: !GetAtt ResponseSQS.Arn
          batchSize: 10
          functionResponseType: ReportBatchItemFailures

  appointmentPE:
    handler: src/handlers/appointment_pe.handler
    events:
      - sqs:
          arn: !GetAtt SQSPE.Arn
          batchSize: 5
          functionResponseType: ReportBatchItemFailures

  appointmentCL:
    handler: src/handlers/appointment_cl.handler
    events:
      - sqs:
          arn: !GetAtt SQSCL.Arn
          batchSize: 5
          functionResponseType: ReportBatchItemFailures

plugins:
  - serverless-offline

resources:
  Resources:
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-Appointments
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: appointmentId
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: appointmentId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: InsuredIdIndex
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    SNSTopicAppointments:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-Topic
        DisplayName: Appointments Topic

    SQSPE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-SQS-PE
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600

    SQSCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-SQS-CL
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600

    ResponseSQS:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-response-queue
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600

    SQSPEPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSPE
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action:
                - sqs:SendMessage
              Resource: !GetAtt SQSPE.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SNSTopicAppointments

    SQSCLPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSCL
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action:
                - sqs:SendMessage
              Resource: !GetAtt SQSCL.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SNSTopicAppointments

    ResponseSQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref ResponseSQS
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action:
                - sqs:SendMessage
              Resource: !GetAtt ResponseSQS.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt EventBridgeRuleToResponseQueue.Arn

    SNSSubPE:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt SQSPE.Arn
        TopicArn: !Ref SNSTopicAppointments
        FilterPolicy:
          countryISO:
            - PE
        RawMessageDelivery: false

    SNSSubCL:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt SQSCL.Arn
        TopicArn: !Ref SNSTopicAppointments
        FilterPolicy:
          countryISO:
            - CL
        RawMessageDelivery: false

    AppointmentsBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:service}-${self:provider.stage}-bus

    EventBridgeRuleToResponseQueue:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref AppointmentsBus
        EventPattern:
          source:
            - appointment.completed
          detail-type:
            - AppointmentConfirmed
        State: ENABLED
        Targets:
          - Arn: !GetAtt ResponseSQS.Arn
            Id: SendToResponseQueue

  Outputs:
    AppointmentsTableName:
      Value: ${self:service}-${self:provider.stage}-Appointments
      Export:
        Name: ${self:service}-${self:provider.stage}-TableName
    
    SNSTopicArn:
      Value: !Ref SNSTopicAppointments
      Export:
        Name: ${self:service}-${self:provider.stage}-SNSTopicArn
    
    EventBusName:
      Value: !Ref AppointmentsBus
      Export:
        Name: ${self:service}-${self:provider.stage}-EventBusName
    
    SQSPEUrl:
      Value: !Ref SQSPE
      Export:
        Name: ${self:service}-${self:provider.stage}-SQSPE-Url
    
    SQSCLUrl:
      Value: !Ref SQSCL
      Export:
        Name: ${self:service}-${self:provider.stage}-SQSCL-Url
    
    ResponseSQSUrl:
      Value: !Ref ResponseSQS
      Export:
        Name: ${self:service}-${self:provider.stage}-ResponseSQS-Url
    
    ApiEndpoint:
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiEndpoint